datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique
  role  String // enum isn't supported by SQLite connector

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password   Password?
  migrations Migration[]

  location   Place?  @relation(fields: [locationId], references: [id], onDelete: SetNull, onUpdate: SetNull)
  locationId String?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Migration {
  id          String @id @default(cuid())
  title       String
  species     String
  description String
  imageUrl    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  steps MigrationStep[]
  observations Observation[]
}

model MigrationStep {
  id        String   @id @default(cuid())
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  placeId   String
  startDate DateTime
  endDate   DateTime

  migration   Migration @relation(fields: [migrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  migrationId String
}

model Place {
  id        String @id @default(cuid())
  title     String
  latitude  Float
  longitude Float

  parent         Place?          @relation(name: "parent", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parentId       String?
  children       Place[]         @relation("parent")
  migrationSteps MigrationStep[]
  users          User[]
  observations   Observation[]
}

model Observation {
  id          String  @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  migration   Migration @relation(fields: [migrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  migrationId String
  place       Place?  @relation(fields: [placeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  placeId     String?
}
